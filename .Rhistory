) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line),
title = "",
symbol = 'circle',
animation = TRUE
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line),
title = "",
symbol = 'circle',
label = 'show'
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line),
title = "",
symbol = 'circle',
label = list(show = TRUE)
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line),
title = "",
symbol = 'circle',
label = list(list(show = TRUE))
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line),
title = "",
symbol = 'circle',
label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, label = list(formatter = -17)),
title = "",
symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, label = list(formatter = '-17')),
title = "",
symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, symbol = 'circle', label = list(formatter = '-17'))
# title = "",
# symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, label = list(formatter = '-17')),
symbol = 'circle'
# title = "",
# symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
b <- '-17'
#| echo: false
library(echarts4r)
b <- '-17'
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, label = list(formatter = b)),
symbol = 'circle'
# title = "",
# symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
chill
#| echo: false
library(echarts4r)
b <- '-17'
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, label = list(formatter = chill)),
symbol = 'circle'
# title = "",
# symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
chill
#| echo: false
library(echarts4r)
b <- '-17'
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, label = list(formatter = as.character(chill))),
symbol = 'circle'
# title = "",
# symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, label = list(formatter = as.character(chill))),
symbol = 'circle'
# title = "",
# symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, symbol = 'circle', label = list(formatter = as.character(chill))),
# symbol = 'circle'
# title = "",
# symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 2000)
echart
#| include: false
# Source functions and get weather data, then clean
source("functions.R")
forecast <- possibly_insistently_get_weather()
all <- clean_hourly_weather(forecast)
fri <- all[['Fri']]
full <- all[['Full']]
# Get wind chill and make decisions
chill <- fri |>
dplyr::pull(chill)
decision <- go_nogo(chill)
reason <- decide(chill)
decision
# Define badge color based on status
badge_color <- ifelse(decision == "Go", "green", "red")
# Generate the badge URL
badge_url <- paste0("https://img.shields.io/badge/Workout%20Status-", workout_status, "-", badge_color, "?style=plastic")
# Define badge color based on status
badge_color <- ifelse(decision == "Go", "green", "red")
# Generate the badge URL
badge_url <- paste0("https://img.shields.io/badge/Workout%20Status-", decision, "-", badge_color, "?style=plastic")
badge_url
# Define badge color based on status
badge_color <- ifelse(decision == "Go", "green", "red")
# Generate the badge URL
badge_url <- paste0("https://img.shields.io/badge/Status-", decision, "-", badge_color, "?style=plastic")
#| include: false
# Source functions and get weather data, then clean
source("functions.R")
forecast <- possibly_insistently_get_weather()
all <- clean_hourly_weather(forecast)
fri <- all[['Fri']]
full <- all[['Full']]
# Get wind chill and make decisions
chill <- fri |>
dplyr::pull(chill)
decision <- go_nogo(chill)
reason <- decide(chill)
# workout_status <- "GO" # Change to "NO GO" to test
# Define badge color based on status
badge_color <- ifelse(decision == "Go", "green", "red")
# Generate badge URL
badge_url <- paste0("https://img.shields.io/badge/Workout%20Status-", decision, "-", badge_color, "?style=plastic")
paste0("<img src='", badge_url, "' style='transform: scale(1.5); display: inline-block;'>")
#| include: false
# Source functions and get weather data, then clean
source("functions.R")
forecast <- possibly_insistently_get_weather()
all <- clean_hourly_weather(forecast)
fri <- all[['Fri']]
full <- all[['Full']]
# Get wind chill and make decisions
chill <- fri |>
dplyr::pull(chill)
decision <- go_nogo(chill)
reason <- decide(chill)
#| echo: false
# Define badge color based on status
badge_color <- ifelse(decision == "Go", "green", "red")
# Generate the badge URL
badge_url <- paste0("https://img.shields.io/badge/Status-", decision, "-", badge_color, "?style=plastic")
renv::install("patchwork")
url <- paste0("![](", badge_url,"'" )
url
url <- paste0("![](", badge_url,")'" )
url
url <- paste0("![](", badge_url,")" )
url
url <- paste0("![](", badge_url,")" )
rmarkdown::render(url)
url
rmarkdown::html_notebook_output_img(path = badge_url)
renv::install('glue')
#| include: false
# Source functions and get weather data, then clean
source("functions.R")
forecast <- possibly_insistently_get_weather()
all <- clean_hourly_weather(forecast)
fri <- all[['Fri']]
full <- all[['Full']]
# Get wind chill and make decisions
chill <- fri |>
dplyr::pull(chill)
decision <- go_nogo(chill)
reason <- decide(chill)
#| echo: false
# Define badge color based on status
badge_color <- ifelse(decision == "Go", "green", "red")
# Generate the badge URL
badge_url <- paste0("https://img.shields.io/badge/Status-", decision, "-", badge_color, "?style=plastic")
#| echo: false
decision_df <- dplyr::tibble(Category = c("Decision", "Reason"), Value = c(decision, reason))
gt <- fri |>
dplyr::select(Chill = chill, Temp = temperature, Wind = windSpeed, Direction = windDirection, Summary = shortForecast, Time = time) |>
dplyr::mutate(dplyr::across(everything(), as.character)) |>
tidyr::pivot_longer(cols = everything(), names_to = 'Category', values_to = 'Value') |>
dplyr::bind_rows(decision_df) |>
make_gt()
#| echo: false
library(echarts4r)
mark_line <- fri |>
dplyr::pull(time)
echart <- full |>
dplyr::select(time, chill) |>
echarts4r::e_chart(time) |>
echarts4r::e_line(chill, symbol = 'none') |>
echarts4r::e_tooltip(trigger = "axis") |>
# echarts4r::e_mark_line(serie = 'time', data = list(xAxis = as.POSIXct('2024-12-11 13:00:00', format = "%Y-%m-%d %H:%M:%S")), title = "")
echarts4r::e_mark_line(
data = list(xAxis = mark_line, label = list(formatter = as.character(chill))),
symbol = 'circle'
# title = "",
# symbol = 'circle'
# label = list(formatter = '-17')
) |>
# echarts4r::e_title("Wind Chill by Hour") |>
echarts4r::e_legend(show = FALSE) |>
echarts4r::e_animation(show = TRUE, duration = 6000)
#echart
#| echo: false
# gt
#| echo: false
#| fig-align: right
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;'> **2014 - 2019 Salary and Playoff Appearances**&#x26BD;")))
#| echo: false
#| fig-align: right
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;")))
#| echo: false
#| fig-align: right
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;'")))
#| echo: false
#| fig-align: right
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;';")))
#| echo: false
#| fig-align: right
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;'> **2014 - 2019 Salary and Playoff Appearances**&#x26BD;")))
#| echo: false
#| fig-align: right
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;'> ;")))
#| echo: false
#| fig-align: right
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;'> ;")))
#| echo: false
#| fig-align: right
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;'> ")))
#| echo: false
#| fig-align: center
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;' ")))
#| echo: false
#| fig-align: center
#| fig-subcap: "Fig. 1 Weather Summary"
gt |>
gt::tab_header(title = md(glue::glue("<img src='{ badge_url }' style='height:30px;'>")))
wind = 0
temp = 0
35.74 + 0.6215 * temp - 35.75 * wind^0.16 + 0.4275 * temp * wind^0.16
possibly_insistently_get_weather
# Source functions and get weather data, then clean
source("functions.R")
possibly_insistently_get_weather
purrr::insistently
safeDivide <- function(a, b) {
tryCatch(
{
# Attempt to divide
result <- a / b
return(result)
},
error = function(e) {
# Custom error handling
message <- paste("An error occurred:", e$message)
cat(message, "\n")
return(NA) # Return NA or another value to indicate the error
}
)
}
safeDivide(10,5)
safeDivide(10,6)
safeDivide(10,"foo")
# Custom error handling
message <- paste("Mike's error:", e$message)
safeDivide <- function(a, b) {
tryCatch(
{
# Attempt to divide
result <- a / b
return(result)
},
error = function(e) {
# Custom error handling
message <- paste("Mike's error:", e$message)
cat(message, "\n")
return(NA) # Return NA or another value to indicate the error
}
)
}
safeDivide(10,"foo")
